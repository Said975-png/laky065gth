import { RequestHandler } from "express";
import {
  CreateContractRequest,
  CreateContractResponse,
  ContractData,
} from "@shared/api";
import * as fs from "fs";
import * as path from "path";

// Path to contracts data file
const contractsPath = path.join(
  process.cwd(),
  "data",
  "contracts",
  "contracts.json",
);

// In-memory storage for contracts (for serverless deployment)
let contractsStore: ContractData[] = [];

// Load contracts from file system
function loadContracts(): ContractData[] {
  try {
    if (fs.existsSync(contractsPath)) {
      const data = fs.readFileSync(contractsPath, "utf-8");
      return JSON.parse(data);
    }
  } catch (error) {
    console.error("Error loading contracts:", error);
  }
  return [];
}

// Save contracts to file system
function saveContracts(contracts: ContractData[]): void {
  try {
    const dir = path.dirname(contractsPath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    fs.writeFileSync(contractsPath, JSON.stringify(contracts, null, 2));
  } catch (error) {
    console.error("Error saving contracts:", error);
  }
}

// Save contract HTML file
function saveContractHTML(contractData: ContractData): void {
  try {
    const contractHTML = generateContractHTML(contractData);
    const htmlPath = path.join(
      process.cwd(),
      "data",
      "contracts",
      contractData.fileName,
    );
    const dir = path.dirname(htmlPath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    fs.writeFileSync(htmlPath, contractHTML, "utf-8");
  } catch (error) {
    console.error("Error saving contract HTML:", error);
  }
}

// Initialize contracts store
contractsStore = loadContracts();

// Contract template
const generateContractHTML = (contractData: ContractData): string => {
  const currentDate = new Date().toLocaleDateString("ru-RU");

  return `
    <!DOCTYPE html>
    <html lang="ru">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>–î–æ–≥–æ–≤–æ—Ä ${contractData.id}</title>
      <style>
        body {
          font-family: 'Times New Roman', serif;
          line-height: 1.6;
          max-width: 800px;
          margin: 0 auto;
          padding: 40px;
          color: #333;
        }
        .header {
          text-align: center;
          margin-bottom: 40px;
          border-bottom: 2px solid #333;
          padding-bottom: 20px;
        }
        .contract-title {
          font-size: 24px;
          font-weight: bold;
          margin-bottom: 10px;
        }
        .contract-number {
          font-size: 16px;
          color: #666;
        }
        .section {
          margin-bottom: 30px;
        }
        .section-title {
          font-size: 18px;
          font-weight: bold;
          margin-bottom: 15px;
          color: #2563eb;
        }
        .contract-details {
          background: #f8fafc;
          padding: 20px;
          border-radius: 8px;
          border-left: 4px solid #2563eb;
        }
        .detail-row {
          display: flex;
          margin-bottom: 10px;
        }
        .detail-label {
          font-weight: bold;
          width: 200px;
          flex-shrink: 0;
        }
        .detail-value {
          flex: 1;
        }
        .footer {
          margin-top: 40px;
          border-top: 2px solid #333;
          padding-top: 20px;
          text-align: center;
        }
        .signature-section {
          display: flex;
          justify-content: space-between;
          margin-top: 40px;
        }
        .signature-block {
          text-align: center;
          width: 300px;
        }
        .signature-line {
          border-bottom: 1px solid #333;
          height: 50px;
          margin-bottom: 10px;
        }
        @media print {
          body { margin: 0; padding: 20px; }
        }
      </style>
    </head>
    <body>
      <div class="header">
        <div class="contract-title">–î–û–ì–û–í–û–† –ù–ê –†–ê–ó–†–ê–ë–û–¢–ö–£</div>
        <div class="contract-number">‚Ññ ${contractData.id}</div>
        <div>–æ—Ç ${currentDate}</div>
      </div>

      <div class="section">
        <div class="section-title">1. –°–¢–û–†–û–ù–´ –î–û–ì–û–í–û–†–ê</div>
        <p><strong>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</strong> JARVIS INTERCOMA</p>
        <p><strong>–ó–∞–∫–∞–∑—á–∏–∫:</strong> ${contractData.clientName}</p>
        <p><strong>Email:</strong> ${contractData.clientEmail}</p>
      </div>

      <div class="section">
        <div class="section-title">2. –ü–†–ï–î–ú–ï–¢ –î–û–ì–û–í–û–†ÔøΩÔøΩ</div>
        <div class="contract-details">
          <div class="detail-row">
            <div class="detail-label">–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:</div>
            <div class="detail-value">${contractData.projectType}</div>
          </div>
          <div class="detail-row">
            <div class="detail-label">–û–ø–∏—Å–∞–Ω–∏–µ:</div>
            <div class="detail-value">${contractData.projectDescription}</div>
          </div>
          <div class="detail-row">
            <div class="detail-label">–°—Ç–æ–∏–º–æ—Å—Ç—å:</div>
            <div class="detail-value">–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${contractData.price.toLocaleString("ru-RU")} —Å—É–º</div>
          </div>
        </div>
      </div>

      <div class="section">
        <div class="section-title">3. –£–°–õ–û–í–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø</div>
        <p>3.1. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ–±—è–∑—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é.</p>
        <p>3.2. –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç: 15-20 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞.</p>
        <p>3.3. –ó–∞–∫–∞–∑—á–∏–∫ –æ–±—è–∑—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç.</p>
      </div>

      <div class="section">
        <div class="section-title">4. –ü–û–†–Ø–î–û–ö –û–ü–õ–ê–¢–´</div>
        <p>4.1. –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${contractData.price.toLocaleString("ru-RU")} —Å—É–º.</p>
        <p>4.2. –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:</p>
        <ul>
          <li>50% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞</li>
          <li>50% –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç –∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</li>
        </ul>
      </div>

      <div class="section">
        <div class="section-title">5. –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–¨ –°–¢–û–†–û–ù</div>
        <p>5.1. –ó–∞ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ–Ω–∞–¥–ª–µ–∂–∞—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ —Å—Ç–æ—Ä–æ–Ω—ã –Ω–µ—Å—É—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–µ–π—Å—Ç–≤—É—é—â–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º.</p>
        <p>5.2. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤.</p>
      </div>

      <div class="signature-section">
        <div class="signature-block">
          <div><strong>–ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨</strong></div>
          <div class="signature-line"></div>
          <div>JARVIS INTERCOMA</div>
          <div>–°–æ–∑–¥–∞—Ç–µ–ª—å: –•—É—Å–∞–∏–Ω–æ–≤ –°–∞–∏–¥</div>
        </div>
        <div class="signature-block">
          <div><strong>–ó–ê–ö–ê–ó–ß–ò–ö</strong></div>
          <div class="signature-line"></div>
          <div>${contractData.clientName}</div>
        </div>
      </div>

      <div class="footer">
        <p><em>–î–æ–≥–æ–≤–æ—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π Jarvis AI</em></p>
        <p><em>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date(contractData.createdAt).toLocaleString("ru-RU", { timeZone: "Asia/Tashkent" })}</em></p>
      </div>
    </body>
    </html>
  `;
};

export const createContract: RequestHandler = async (req, res) => {
  console.log("üìù [CONTRACT] –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω");
  console.log("üìù [CONTRACT] Method:", req.method);
  console.log("üìù [CONTRACT] URL:", req.url);
  console.log("üìù [CONTRACT] Headers:", req.headers);
  console.log("üìù [CONTRACT] Body:", req.body);

  try {
    const {
      projectType,
      projectDescription,
      clientName,
      clientEmail,
      estimatedPrice,
    }: CreateContractRequest = req.body;

    // Generate contract ID
    const contractId = `JAR-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;

    // Get current user from request (you might need to implement auth middleware)
    const userId = (req.headers["user-id"] as string) || "anonymous";

    // Create contract data
    const contractData: ContractData = {
      id: contractId,
      userId,
      clientName,
      clientEmail,
      projectType,
      projectDescription,
      price: estimatedPrice,
      createdAt: new Date().toISOString(),
      status: "draft",
      fileName: `contract-${contractId}.html`,
    };

    // Store contract in memory and file system
    contractsStore.push(contractData);
    saveContracts(contractsStore);

    // Save contract HTML file
    saveContractHTML(contractData);

    const response: CreateContractResponse = {
      success: true,
      message: "–î–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
      contractId,
      contractUrl: `/api/contracts/${contractId}`,
    };

    res.json(response);
  } catch (error) {
    console.error("Contract creation error:", error);
    const response: CreateContractResponse = {
      success: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞",
      error: error instanceof Error ? error.message : "Unknown error",
    };
    res.status(500).json(response);
  }
};

export const getUserContracts: RequestHandler = async (req, res) => {
  console.log(
    "üìã [CONTRACT] –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω",
  );
  console.log("üìã [CONTRACT] Method:", req.method);
  console.log("üìã [CONTRACT] URL:", req.url);
  console.log("üìã [CONTRACT] Headers:", req.headers);

  try {
    const userId = req.headers["user-id"] as string;

    if (!userId) {
      return res.status(401).json({
        success: false,
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
      });
    }

    // Reload contracts from file system for latest data
    contractsStore = loadContracts();

    // Filter contracts by user ID
    const userContracts = contractsStore.filter(
      (contract) => contract.userId === userId,
    );

    res.json({
      success: true,
      contracts: userContracts,
    });
  } catch (error) {
    console.error("Error fetching user contracts:", error);
    res.status(500).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤",
    });
  }
};

export const getContract: RequestHandler = async (req, res) => {
  console.log("üìÑ [CONTRACT] –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω");
  console.log("üìÑ [CONTRACT] Method:", req.method);
  console.log("üìÑ [CONTRACT] URL:", req.url);
  console.log("üìÑ [CONTRACT] Params:", req.params);

  try {
    const { contractId } = req.params;

    // Reload contracts from file system for latest data
    contractsStore = loadContracts();

    // Find contract
    const contract = contractsStore.find((c) => c.id === contractId);

    if (!contract) {
      return res.status(404).json({
        success: false,
        message: "–î–æ–≥–æ–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    // Generate HTML for the contract
    const contractHTML = generateContractHTML(contract);
    res.setHeader("Content-Type", "text/html; charset=utf-8");
    res.send(contractHTML);
  } catch (error) {
    console.error("Error fetching contract:", error);
    res.status(500).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞",
    });
  }
};
